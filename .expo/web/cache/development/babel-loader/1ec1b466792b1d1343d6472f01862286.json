{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/christopherkoch/reactnatchat/components/Chat.js\";\nimport React, { Component } from \"react\";\nimport NetInfo from \"@react-native-community/netinfo\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport { GiftedChat, InputToolbar } from \"react-native-gifted-chat\";\nimport KeyboardSpacer from \"react-native-keyboard-spacer\";\nimport CustomActions from \"./CustomActions\";\nimport MapView from \"react-native-maps\";\n\nvar firebase = require(\"firebase\");\n\nrequire(\"firebase/firestore\");\n\nvar Chat = function (_Component) {\n  _inherits(Chat, _Component);\n\n  function Chat() {\n    var _this;\n\n    _classCallCheck(this, Chat);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chat).call(this));\n\n    _this.getMessages = function _callee() {\n      var messages;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              messages = \"\";\n              _context.prev = 1;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"messages\"));\n\n            case 4:\n              _context.t0 = _context.sent;\n\n              if (_context.t0) {\n                _context.next = 7;\n                break;\n              }\n\n              _context.t0 = [];\n\n            case 7:\n              messages = _context.t0;\n\n              _this.setState({\n                messages: JSON.parse(messages)\n              });\n\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t1 = _context[\"catch\"](1);\n              console.log(_context.t1.message);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[1, 11]]);\n    };\n\n    _this.saveMessages = function _callee2() {\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"messages\", JSON.stringify(_this.state.messages)));\n\n            case 3:\n              _context2.next = 8;\n              break;\n\n            case 5:\n              _context2.prev = 5;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(_context2.t0.message);\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[0, 5]]);\n    };\n\n    _this.deleteMessages = function _callee3() {\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.removeItem(\"messages\"));\n\n            case 3:\n              _context3.next = 8;\n              break;\n\n            case 5:\n              _context3.prev = 5;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.log(_context3.t0.message);\n\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, [[0, 5]]);\n    };\n\n    _this.onCollectionUpdate = function (querySnapshot) {\n      var messages = [];\n      querySnapshot.forEach(function (doc) {\n        var data = doc.data();\n        messages.push({\n          _id: data._id,\n          text: data.text || \"\",\n          createdAt: data.createdAt.toDate(),\n          user: data.user,\n          image: data.image || null,\n          location: data.location || null\n        });\n      });\n\n      _this.setState({\n        messages: messages\n      });\n    };\n\n    _this.handleConnectivityChange = function (state) {\n      var isConnected = state.isConnected;\n\n      if (isConnected == true) {\n        _this.setState({\n          isConnected: true\n        });\n\n        _this.unsubscribe = _this.referenceChatMessages.orderBy(\"createdAt\", \"desc\").onSnapshot(_this.onCollectionUpdate);\n      } else {\n        _this.setState({\n          isConnected: false\n        });\n      }\n    };\n\n    _this.addMessage = function () {\n      var message = _this.state.messages[0];\n\n      _this.referenceChatMessages.add({\n        _id: message._id,\n        text: message.text || \"\",\n        createdAt: message.createdAt,\n        user: message.user,\n        image: message.image || null,\n        location: message.location || null\n      });\n    };\n\n    _this.onSend = function () {\n      var messages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      _this.setState(function (previousState) {\n        return {\n          messages: GiftedChat.append(previousState.messages, messages)\n        };\n      }, function () {\n        _this.addMessage();\n\n        _this.saveMessages();\n      });\n    };\n\n    _this.renderInputToolbar = function (props) {\n      console.log(\"renderInputToolbar --> props\", props.isConnected);\n\n      if (props.isConnected === false) {} else {\n        return React.createElement(InputToolbar, _extends({}, props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 291\n          }\n        }));\n      }\n    };\n\n    _this.renderCustomActions = function (props) {\n      return React.createElement(CustomActions, _extends({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299\n        }\n      }));\n    };\n\n    if (!firebase.apps.length) {\n      firebase.initializeApp({\n        apiKey: \"AIzaSyAmG0c_F_AOdIv9kUX8vEJ9DTwHwu6-HfM\",\n        authDomain: \"test-37279.firebaseapp.com\",\n        databaseURL: \"https://test-37279.firebaseio.com\",\n        projectId: \"test-37279\",\n        storageBucket: \"test-37279.appspot.com\",\n        messagingSenderId: \"302272369863\",\n        appId: \"1:302272369863:web:e0b5ce7857eddd38901ae2\",\n        measurementId: \"G-S8BWCKJGF6\"\n      });\n    }\n\n    _this.referenceChatMessages = firebase.firestore().collection(\"messages\");\n    _this.state = {\n      messages: [],\n      uid: 0,\n      isConnected: false,\n      image: null\n    };\n    return _this;\n  }\n\n  _createClass(Chat, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      NetInfo.addEventListener(function (state) {\n        _this2.handleConnectivityChange(state);\n      });\n      NetInfo.fetch().then(function (state) {\n        var isConnected = state.isConnected;\n\n        if (isConnected) {\n          _this2.setState({\n            isConnected: true\n          });\n\n          _this2.authUnsubscribe = firebase.auth().onAuthStateChanged(function _callee4(user) {\n            return _regeneratorRuntime.async(function _callee4$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    if (user) {\n                      _context4.next = 3;\n                      break;\n                    }\n\n                    _context4.next = 3;\n                    return _regeneratorRuntime.awrap(firebase.auth().signInAnonymously());\n\n                  case 3:\n                    _this2.setState({\n                      uid: user.uid,\n                      messages: []\n                    });\n\n                    _this2.unsubscribe = _this2.referenceChatMessages.orderBy(\"createdAt\", \"desc\").onSnapshot(_this2.onCollectionUpdate);\n\n                  case 5:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            });\n          });\n        } else {\n          _this2.setState({\n            isConnected: false\n          });\n\n          _this2.getMessages();\n        }\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.unsubscribe();\n      this.authUnsubscribe();\n      NetInfo.isConnected.removeEventListener(\"connectionChange\", this.handleConnectivityChange);\n    }\n  }, {\n    key: \"renderCustomView\",\n    value: function renderCustomView(props) {\n      var currentMessage = props.currentMessage;\n\n      if (currentMessage.location) {\n        return React.createElement(MapView, {\n          style: {\n            width: 150,\n            height: 100,\n            borderRadius: 13,\n            margin: 3\n          },\n          region: {\n            latitude: currentMessage.location.latitude,\n            longitude: currentMessage.location.longitude,\n            latitudeDelta: 0.0922,\n            longitudeDelta: 0.0421\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 306\n          }\n        });\n      }\n\n      return null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(View, {\n        style: {\n          flex: 1,\n          backgroundColor: this.props.navigation.state.params.backgroundColor\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324\n        }\n      }, React.createElement(GiftedChat, {\n        messages: this.state.messages,\n        isConnected: this.state.isConnected,\n        renderInputToolbar: this.renderInputToolbar,\n        renderActions: this.renderCustomActions,\n        renderCustomView: this.renderCustomView,\n        onSend: function onSend(messages) {\n          return _this3.onSend(messages);\n        },\n        user: {\n          _id: this.state.uid\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330\n        }\n      }), Platform.OS === \"android\" ? React.createElement(KeyboardSpacer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341\n        }\n      }) : null);\n    }\n  }]);\n\n  return Chat;\n}(Component);\n\nChat.navigationOptions = function (_ref) {\n  var navigation = _ref.navigation;\n  return {\n    title: navigation.state.params.userName + \"'s Chat\"\n  };\n};\n\nexport { Chat as default };\nvar styles = StyleSheet.create({});","map":{"version":3,"sources":["/Users/christopherkoch/reactnatchat/components/Chat.js"],"names":["React","Component","NetInfo","GiftedChat","InputToolbar","KeyboardSpacer","CustomActions","MapView","firebase","require","Chat","getMessages","messages","AsyncStorage","getItem","setState","JSON","parse","console","log","message","saveMessages","setItem","stringify","state","deleteMessages","removeItem","onCollectionUpdate","querySnapshot","forEach","doc","data","push","_id","text","createdAt","toDate","user","image","location","handleConnectivityChange","isConnected","unsubscribe","referenceChatMessages","orderBy","onSnapshot","addMessage","add","onSend","previousState","append","renderInputToolbar","props","renderCustomActions","apps","length","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","collection","uid","addEventListener","fetch","then","authUnsubscribe","auth","onAuthStateChanged","signInAnonymously","removeEventListener","currentMessage","width","height","borderRadius","margin","latitude","longitude","latitudeDelta","longitudeDelta","flex","backgroundColor","navigation","params","renderCustomView","Platform","OS","navigationOptions","title","userName","styles","StyleSheet","create"],"mappings":"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","sourcesContent":["/**\n * @description this is the chatscreen, where the user can write and sent\n * messages, images or geo-location\n * @class Chat\n * @requires React\n * @requires React-Native\n * @requires Keyboard-Spacer\n * @requires React-Native-Gifted-Chat\n * @requires CustomActions\n * @requires React-Native-Maps\n * @requires Firebase\n * @requires Firestore\n */\n\n//  import react component\nimport React, { Component } from \"react\";\n//import relevant components from react native\nimport NetInfo from \"@react-native-community/netinfo\";\nimport { StyleSheet, Text, View, Platform, AsyncStorage } from \"react-native\";\nimport { GiftedChat, InputToolbar } from \"react-native-gifted-chat\";\nimport KeyboardSpacer from \"react-native-keyboard-spacer\";\n//import custom CustomActions\nimport CustomActions from \"./CustomActions\";\n//import MapView\nimport MapView from \"react-native-maps\";\n\n// create Screen2 (Chat) class\n//import firebase\nconst firebase = require(\"firebase\");\nrequire(\"firebase/firestore\");\n\n// create Screen2 (Chat) class\nexport default class Chat extends Component {\n  constructor() {\n    super();\n\n    /**\n     * initializing firebase\n     * @param {object} firebaseConfig\n     * @param {string} apiKey\n     * @param {string} authDomain\n     * @param {string} databaseURL\n     * @param {string} projectID\n     * @param {string} storageBucket\n     * @param {string} messagingSenderId\n     * @param {string} appId\n     */\n\n    if (!firebase.apps.length) {\n      firebase.initializeApp({\n        apiKey: \"AIzaSyAmG0c_F_AOdIv9kUX8vEJ9DTwHwu6-HfM\",\n        authDomain: \"test-37279.firebaseapp.com\",\n        databaseURL: \"https://test-37279.firebaseio.com\",\n        projectId: \"test-37279\",\n        storageBucket: \"test-37279.appspot.com\",\n        messagingSenderId: \"302272369863\",\n        appId: \"1:302272369863:web:e0b5ce7857eddd38901ae2\",\n        measurementId: \"G-S8BWCKJGF6\"\n      });\n    }\n\n    this.referenceChatMessages = firebase.firestore().collection(\"messages\");\n\n    this.state = {\n      messages: [],\n      uid: 0,\n      isConnected: false,\n      image: null\n    };\n  }\n\n  /**\n   * loads all messages from AsyncStorage\n   * @function getMessages \n   * @async\n   * @return {Promise<string>} The data from the storage\n   */\n  getMessages = async () => {\n    let messages = \"\";\n    try {\n      messages = (await AsyncStorage.getItem(\"messages\")) || [];\n      this.setState({\n        messages: JSON.parse(messages)\n      });\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  /**\n   * saves all messages from AsyncStorage\n   * @function saveMessages \n   * @async\n   */\n  saveMessages = async () => {\n    try {\n      await AsyncStorage.setItem(\n        \"messages\",\n        JSON.stringify(this.state.messages)\n      );\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  /**\n   * deletes all messages from AsyncStorage\n   * @function deleteMessages\n   * @async\n   */\n\n  deleteMessages = async () => {\n    try {\n      await AsyncStorage.removeItem(\"messages\");\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  // componentDidMount is a \"lifecycle method\". Lifecycle methods run the\n  // function at various times during a component's \"lifecycle\". For example\n  // componentDidMount will run right after the component was added to the page.\n  componentDidMount() {\n\n\n    // NetInfo is a library that gives you access to the current network status\n    // of the user's device. For example, are we connected or disconnected from\n    // the network.\n\n    // .addEventListener registers a function to be called whenever an \"event\"\n    // happens, which in this case would be when the connectivity status\n    // changes. The function you give to addEventListener will be called with\n    // the \"state\" object, which has properties on it like \"isConnected\".\n    NetInfo.addEventListener(state => {\n      this.handleConnectivityChange(state);\n    });\n\n    NetInfo.fetch().then(state => {\n      const isConnected = state.isConnected;\n      if (isConnected) {\n        this.setState({\n          isConnected: true\n        });\n\n        this.authUnsubscribe = firebase\n          .auth()\n          .onAuthStateChanged(async user => {\n            if (!user) {\n              await firebase.auth().signInAnonymously();\n            }\n\n            this.setState({\n              uid: user.uid,\n              messages: []\n            });\n\n            this.unsubscribe = this.referenceChatMessages\n              .orderBy(\"createdAt\", \"desc\")\n              .onSnapshot(this.onCollectionUpdate);\n          });\n      } else {\n        this.setState({\n          isConnected: false\n        });\n\n        this.getMessages();\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe();\n    this.authUnsubscribe();\n\n    NetInfo.isConnected.removeEventListener(\n      \"connectionChange\",\n      this.handleConnectivityChange\n    );\n  }\n\n  /**\n   * onCollectionUpdte takes snapshot on collection update\n   * @function onCollectionUpdate\n   * @param {string} _id\n   * @param {string} text\n   * @param {number} created.At\n   * @param {object} user\n   * @param {string} user._id\n   * @param {string} image\n   * @param {object} location\n   * @param {number} location.longitude\n   * @param {number} location.latitude\n   */\n  onCollectionUpdate = querySnapshot => {\n    const messages = [];\n    // go through each document\n    querySnapshot.forEach(doc => {\n      // get the QueryDocumentSnapshot's data\n      const data = doc.data();\n      messages.push({\n        _id: data._id,\n        text: data.text || \"\",\n        createdAt: data.createdAt.toDate(),\n        user: data.user,\n        image: data.image || null,\n        location: data.location || null\n      });\n    });\n\n    this.setState({\n      messages\n    });\n  };\n\n  /**\n   * checks networkstatus of user\n   * @function handleConnectivityChange\n   */\n  handleConnectivityChange = state => {\n    const isConnected = state.isConnected;\n    if (isConnected == true) {\n      this.setState({\n        isConnected: true\n      });\n      this.unsubscribe = this.referenceChatMessages\n        .orderBy(\"createdAt\", \"desc\")\n        .onSnapshot(this.onCollectionUpdate);\n    } else {\n      this.setState({\n        isConnected: false\n      });\n    }\n  };\n\n  /**\n   * adds the message object to firestore, fired by onSend function\n   * @function addMessage\n   * @param {string} _id\n   * @param {string} text\n   * @param {number} created.At\n   * @param {object} user\n   * @param {string} user._id\n   * @param {string} image\n   * @param {object} location\n   * @param {number} location.longitude\n   * @param {number} location.latitude\n   */\n  addMessage = () => {\n    const message = this.state.messages[0];\n    this.referenceChatMessages.add({\n      _id: message._id,\n      text: message.text || \"\",\n      createdAt: message.createdAt,\n      user: message.user,\n      image: message.image || null,\n      location: message.location || null\n    });\n  };\n  //define title in navigation bar\n  static navigationOptions = ({ navigation }) => {\n    return {\n      title: `${navigation.state.params.userName}'s Chat`\n    };\n  };\n\n  /**\n   * handles actions when user hits send-button\n   * @function onSend\n   * @param {object} messages\n   */\n  onSend = (messages = []) => {\n    this.setState(\n      previousState => ({\n        messages: GiftedChat.append(previousState.messages, messages)\n      }),\n      () => {\n        this.addMessage();\n        this.saveMessages();\n      }\n    );\n  };\n\n  /**\n   * hides inputbar when offline\n   * @function renderInputToolbar\n   */\n  renderInputToolbar = props => {\n    console.log(\"renderInputToolbar --> props\", props.isConnected);\n    if (props.isConnected === false) {\n    } else {\n      return <InputToolbar {...props} />;\n    }\n  };\n\n  /**\n   * displays the communication features\n   * @function renderCustomActions\n   */\n  renderCustomActions = props => <CustomActions {...props} />;\n\n  //custom map view\n  renderCustomView(props) {\n    const { currentMessage } = props;\n    if (currentMessage.location) {\n      return (\n        <MapView\n          style={{ width: 150, height: 100, borderRadius: 13, margin: 3 }}\n          region={{\n            latitude: currentMessage.location.latitude,\n            longitude: currentMessage.location.longitude,\n            latitudeDelta: 0.0922,\n            longitudeDelta: 0.0421\n          }}\n        />\n      );\n    }\n    return null;\n  }\n\n  //render components\n  render() {\n    return (\n      //fullscreen component\n      <View\n        style={{\n          flex: 1,\n          backgroundColor: this.props.navigation.state.params.backgroundColor\n        }}\n      >\n        <GiftedChat\n          messages={this.state.messages}\n          isConnected={this.state.isConnected}\n          renderInputToolbar={this.renderInputToolbar}\n          renderActions={this.renderCustomActions}\n          renderCustomView={this.renderCustomView}\n          onSend={messages => this.onSend(messages)}\n          user={{\n            _id: this.state.uid\n          }}\n        />\n        {Platform.OS === \"android\" ? <KeyboardSpacer /> : null}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({});"]},"metadata":{},"sourceType":"module"}